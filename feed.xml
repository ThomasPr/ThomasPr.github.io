<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://thomas.preissler.me/feed.xml" rel="self" type="application/atom+xml" /><link href="https://thomas.preissler.me/" rel="alternate" type="text/html" /><updated>2022-04-27T16:00:16+00:00</updated><id>https://thomas.preissler.me/feed.xml</id><title type="html">Thomas’ Blog</title><subtitle>My personal thoughts on technology and oddities.</subtitle><author><name>Thomas Preißler</name></author><entry><title type="html">Using TypeScript to validate translations at compile time</title><link href="https://thomas.preissler.me/blog/2022/03/30/using-typescript-to-validate-translations-at-compile-time" rel="alternate" type="text/html" title="Using TypeScript to validate translations at compile time" /><published>2022-03-30T19:36:32+00:00</published><updated>2022-03-30T19:36:32+00:00</updated><id>https://thomas.preissler.me/blog/2022/03/30/using-typescript-to-validate-translations-at-compile-time</id><content type="html" xml:base="https://thomas.preissler.me/blog/2022/03/30/using-typescript-to-validate-translations-at-compile-time"><![CDATA[<p>In web applications as I know them, translations are mostly stored in JSONish format and accessed at runtime. Usually, the setup is more complex since the applications needs to support multiple translations. But for now let’s keep it as simple as possible.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">translation</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">helloWorld</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Hallo Welt!</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">dialog</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">title</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Bestätigung</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">description</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Möchten Sie fortfahren?</span><span class="dl">'</span>
  <span class="p">},</span>
  <span class="na">actions</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">buttons</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">submit</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Bestätigen</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">cancel</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Abbrechen</span><span class="dl">'</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>To retrieve and display the translation at runtime there is a method called <code class="language-plaintext highlighter-rouge">translate</code> which returns the corresponding translation for a key from the translation object:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">StringOnlyJson</span> <span class="o">=</span> <span class="kr">string</span> <span class="o">|</span> <span class="p">{</span> <span class="p">[</span><span class="na">property</span><span class="p">:</span> <span class="kr">string</span><span class="p">]:</span> <span class="nx">StringOnlyJson</span> <span class="p">};</span>

<span class="kd">const</span> <span class="nx">translate</span> <span class="o">=</span> <span class="p">(</span><span class="nx">translationKey</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="kr">string</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">translationKey</span>
    <span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">'</span><span class="s1">.</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">reduce</span><span class="p">(</span>
      <span class="p">(</span><span class="nx">json</span><span class="p">,</span> <span class="nx">propertyName</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">typeof</span> <span class="nx">json</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">object</span><span class="dl">'</span> <span class="p">?</span> <span class="nx">json</span><span class="p">[</span><span class="nx">propertyName</span><span class="p">]</span> <span class="p">:</span> <span class="kc">undefined</span><span class="p">,</span>
      <span class="nx">translation</span> <span class="k">as</span> <span class="nx">StringOnlyJson</span> <span class="o">|</span> <span class="kc">undefined</span>
    <span class="p">);</span>
  <span class="k">return</span> <span class="k">typeof</span> <span class="nx">result</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">string</span><span class="dl">'</span> <span class="p">?</span> <span class="nx">result</span> <span class="p">:</span> <span class="nx">translationKey</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<p>If the method gets called with <code class="language-plaintext highlighter-rouge">dialog.title</code>, it will return <code class="language-plaintext highlighter-rouge">Bestätigung</code>:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">translate</span><span class="p">(</span><span class="dl">'</span><span class="s1">dialog.title</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// returns 'Bestätigung'</span>
</code></pre></div></div>

<p>But what happens if an invalid or incorrect translation key is passed to the method? The method cannot find the corresponding translation and returns the passed key as a fallback. In the following example <code class="language-plaintext highlighter-rouge">dialog.header</code> is passed instead of <code class="language-plaintext highlighter-rouge">dialog.title</code>.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">translate</span><span class="p">(</span><span class="dl">'</span><span class="s1">dialog.header</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// returns 'dialog.header'</span>
</code></pre></div></div>

<p>In my experience this error pattern occurs quite often. A developer simply makes a typo in the translations or changes the naming of a translation key without adjusting them at each source code location. This results in the user seeing only the technical key instead of the expected translation. Such a fallback is helpful because the user can likely continue working with the application instead of getting a blank label or even worse an error message.</p>

<p><img src="/assets/images/2022-03-30/dialog.png" alt="Dialog with missing translation" /></p>

<p>As mentioned at the beginning, translations are usually loaded at runtime. Therefore, such errors do not occur earlier than at runtime. To detect and avoid such defects, an extensive test suite or a high manual testing effort is required. In worst case, such defects occur in production and are displayed to the end user.</p>

<p>For this reason, errors should be found as early as possible and that is usually at compile time.</p>

<p>Wouldn’t it be great if the translation keys could be checked automatically? Let’s jump into the power of TypeScript.</p>

<p>In TypeScript there are these String Literal Types. Isn’t it possible to check the translation keys at compile time and inform the developer about his mistake? It would only need a list of all possible translation keys. That is worth a try:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">TranslationKey</span> <span class="o">=</span>
  <span class="o">|</span> <span class="dl">'</span><span class="s1">helloWorld</span><span class="dl">'</span>
  <span class="o">|</span> <span class="dl">'</span><span class="s1">dialog.title</span><span class="dl">'</span>
  <span class="o">|</span> <span class="dl">'</span><span class="s1">dialog.description</span><span class="dl">'</span>
  <span class="o">|</span> <span class="dl">'</span><span class="s1">actions.buttons.submit</span><span class="dl">'</span>
  <span class="o">|</span> <span class="dl">'</span><span class="s1">actions.buttons.cancel</span><span class="dl">'</span><span class="p">;</span>
</code></pre></div></div>

<p>Afterwards the signature of the <code class="language-plaintext highlighter-rouge">translate</code> method can be changed to use the type <code class="language-plaintext highlighter-rouge">TranslationKey</code> for the <code class="language-plaintext highlighter-rouge">translationKey</code> parameter instead of just <code class="language-plaintext highlighter-rouge">string</code>:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">translate</span> <span class="o">=</span> <span class="p">(</span><span class="nx">translationKey</span><span class="p">:</span> <span class="nx">TranslationKey</span><span class="p">):</span> <span class="kr">string</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// same code as above</span>
<span class="p">};</span>
</code></pre></div></div>

<p>This change leads to the fact that the method <code class="language-plaintext highlighter-rouge">translate</code> must only be called with one of the previously defined values. All other strings are treated as errors by the compiler.</p>

<p>Back to the example from above. What happens if the <code class="language-plaintext highlighter-rouge">translate</code> method gets called with the correct <code class="language-plaintext highlighter-rouge">dialog.title</code> and the incorrect <code class="language-plaintext highlighter-rouge">dialog.header</code>?</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">translate</span><span class="p">(</span><span class="dl">'</span><span class="s1">dialog.title</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// compiles fine</span>
<span class="nx">translate</span><span class="p">(</span><span class="dl">'</span><span class="s1">dialog.header</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// compiler error: Argument of type '"dialog.header"' is not assignable to parameter of type 'TranslationKey'.</span>
</code></pre></div></div>

<p>The compiler gives an error message on the second call. The program does not compile and the developer is forced to correct the mistake.</p>

<p>This solution works very well and is easy to implement. Problem solved. :-)</p>

<p>Well…</p>

<p>This solution requires the developer to maintain all translation keys twice: once in the actual translation and a second time in the definition of the <code class="language-plaintext highlighter-rouge">TranslationKey</code> type. These two definitions must always be kept in sync to avoid the above mentioned errors of missing translations. This process is tedious, error-prone and in the end does not lead to any improvement.</p>

<p>Is there no way to create the <code class="language-plaintext highlighter-rouge">TranslationKey</code> type automatically? The TypeScript compiler would only have to extract the translation keys from the JSON object and concatenate them with a dot.</p>

<p>Indeed, TypeScript can derive the <code class="language-plaintext highlighter-rouge">TranslationKey</code>!</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">DeepKeysOf</span><span class="o">&lt;</span><span class="nx">T</span><span class="p">,</span> <span class="nx">Key</span> <span class="kd">extends</span> <span class="kr">keyof</span> <span class="nx">T</span> <span class="o">=</span> <span class="kr">keyof</span> <span class="nx">T</span><span class="o">&gt;</span> <span class="o">=</span> <span class="nx">Key</span> <span class="kd">extends</span> <span class="kr">string</span>
  <span class="p">?</span> <span class="nx">T</span><span class="p">[</span><span class="nx">Key</span><span class="p">]</span> <span class="kd">extends</span> <span class="kr">string</span> <span class="p">?</span> <span class="nx">Key</span> <span class="p">:</span> <span class="s2">`</span><span class="p">${</span><span class="nx">Key</span><span class="p">}</span><span class="s2">.</span><span class="p">${</span><span class="nx">DeepKeysOf</span><span class="o">&lt;</span><span class="nx">T</span><span class="p">[</span><span class="nx">Key</span><span class="p">]</span><span class="o">&gt;</span><span class="p">}</span><span class="s2">`</span>
  <span class="p">:</span> <span class="nx">never</span><span class="p">;</span>

<span class="kd">type</span> <span class="nx">TranslationKey</span> <span class="o">=</span> <span class="nx">DeepKeysOf</span><span class="o">&lt;</span><span class="k">typeof</span> <span class="nx">translation</span><span class="o">&gt;</span><span class="p">;</span>
</code></pre></div></div>

<p>The type <code class="language-plaintext highlighter-rouge">TranslationKey</code> is identical to the manual definition from above. The behavior of the compiler is as well identical, a call to the <code class="language-plaintext highlighter-rouge">translate</code> method with an incorrect translation key will raise an error.</p>

<p>But what exactly does the <code class="language-plaintext highlighter-rouge">DeepKeysOf</code> type do? Let’s look at the crucial part first:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">T</span><span class="p">[</span><span class="nx">Key</span><span class="p">]</span> <span class="kd">extends</span> <span class="kr">string</span> <span class="p">?</span> <span class="nx">Key</span> <span class="p">:</span> <span class="s2">`</span><span class="p">${</span><span class="nx">Key</span><span class="p">}</span><span class="s2">.</span><span class="p">${</span><span class="nx">DeepKeysOf</span><span class="o">&lt;</span><span class="nx">T</span><span class="p">[</span><span class="nx">Key</span><span class="p">]</span><span class="o">&gt;</span><span class="p">}</span><span class="s2">`</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">T</code> is the type definition of the translation object, <code class="language-plaintext highlighter-rouge">Key</code> is a property of the translation object, <code class="language-plaintext highlighter-rouge">T[Key]</code> is therefore the value of this property. <code class="language-plaintext highlighter-rouge">T[Key]</code> can be either a <code class="language-plaintext highlighter-rouge">string</code>, like <code class="language-plaintext highlighter-rouge">'Hello World!'</code> or another object, like the value of <code class="language-plaintext highlighter-rouge">dialog</code>. In the first case, the execution can be stopped and the result is simply <code class="language-plaintext highlighter-rouge">helloWorld</code>. In the second case a recursion is called, which adds <code class="language-plaintext highlighter-rouge">.</code> to the <code class="language-plaintext highlighter-rouge">Key</code> and again uses the type definition <code class="language-plaintext highlighter-rouge">DeepKeysOf</code> for the object of <code class="language-plaintext highlighter-rouge">T[Key]</code>. With the help of this recursion it is possible to use arbitrarily deeply nested translation objects.</p>

<p>A practical example for <code class="language-plaintext highlighter-rouge">DeepKeysOf&lt;typeof translation&gt;</code>: <code class="language-plaintext highlighter-rouge">T</code> is the entire translation object, <code class="language-plaintext highlighter-rouge">Key</code> is a property of this, i.e. <code class="language-plaintext highlighter-rouge">helloWorld</code>, <code class="language-plaintext highlighter-rouge">dialog</code> or <code class="language-plaintext highlighter-rouge">action</code>. <code class="language-plaintext highlighter-rouge">T[Key]</code> is the value of this property, for the <code class="language-plaintext highlighter-rouge">Key</code> <code class="language-plaintext highlighter-rouge">helloWorld</code> it is <code class="language-plaintext highlighter-rouge">'Hello World!'</code> , for <code class="language-plaintext highlighter-rouge">dialog</code> it is the object <code class="language-plaintext highlighter-rouge">{ title: 'Bestätigung', description: 'Möchten Sie fortfahren?' }</code>. Thus, if <code class="language-plaintext highlighter-rouge">Key</code> is <code class="language-plaintext highlighter-rouge">helloWorld</code> then the expression <code class="language-plaintext highlighter-rouge">T[Key] extends string</code> holds true and thus the result of the expression will be <code class="language-plaintext highlighter-rouge">helloWorld</code>. On the other hand, if <code class="language-plaintext highlighter-rouge">Key</code> is <code class="language-plaintext highlighter-rouge">dialog</code>, then <code class="language-plaintext highlighter-rouge">T[Key]</code> is an object, the expression holds false, and the result is a concatenation of <code class="language-plaintext highlighter-rouge">dialog.</code> (including the dot) with the result of <code class="language-plaintext highlighter-rouge">DeepKeysOf&lt;T['dialog']&gt;</code>.</p>

<p>However, it still has to be clarified how to iterate through the different properties within an object. For this purpose <code class="language-plaintext highlighter-rouge">keyof</code> and a type alias named <code class="language-plaintext highlighter-rouge">Key</code> is used: <code class="language-plaintext highlighter-rouge">Key extends keyof T = keyof T</code>. <code class="language-plaintext highlighter-rouge">keyof T</code> is an alias for all properties of the object <code class="language-plaintext highlighter-rouge">T</code> and allows in that way an iteration through all properties. <code class="language-plaintext highlighter-rouge">Key</code> then contains the current property selected by the iteration through <code class="language-plaintext highlighter-rouge">keyof T</code>. The actual iteration is performed by TypeScript itself.</p>

<p>As a last point there is the wrapper <code class="language-plaintext highlighter-rouge">Key extends string ? ... : never</code> around the actual expression (abbreviated by …). In the translation object <code class="language-plaintext highlighter-rouge">Key</code> is always a <code class="language-plaintext highlighter-rouge">string</code>, so this expression is actually not relevant. But TypeScript does not actually know this, because this has not been defined. But for the later concatenation with <code class="language-plaintext highlighter-rouge">.</code> TypeScript expects a <code class="language-plaintext highlighter-rouge">string</code> (or several other types). By the way, the else branch with the result <code class="language-plaintext highlighter-rouge">never</code> is not called with the translation object. But if the object would contain some keys which are not <code class="language-plaintext highlighter-rouge">string</code> (i.e. <code class="language-plaintext highlighter-rouge">number</code>, or similar), then using <code class="language-plaintext highlighter-rouge">never</code> the corresponding invalid branches in the input object would be ignored.</p>

<p>This entire implementation is also available for simple follow up on the <a href="https://www.typescriptlang.org/play?#code/PTAEFUGcEsDsHNQBUCeAHAppAxgJ2mgC6iED2oAbgIYA20AJlYRiblbJDU9KR6E6GykAtmmg0WhaMIwAoEKAAWhQmkgAuEIUUiqkAHRpcGaJE4Zc+mcABGNUvGAAmAAxOnwFwGZgXl8ABXGAQAWkJ0LDwCQjDSEOo6RmYwtg4uKV5IEKYQoVFxDDDpOVkhDmJCVM5uXlAAXlAAb1lQJQwaewB1UlwaenVQAHIACVp7UE72wgBCQYAaFtB6aFoHAebW1qlCCQHBgCEsQgATqXgAhHnF1vpI-CIeWD2AWQA37GUMWFAAZWgWABmPUIAKoimMsAA-INFgBfBatKjYDIcdbXUA2AIqTJozabSABGzCaCEPaHSAnM5fK541rYdjYdp7ACCNhsxg+1PRsLhsh5snCmFAABEMBg0ABpDAoSAAeQBAB4kHNQFKUKAMAAPZiweiQUAAa2lpAByHqhuNpqQAD56ui1RrtV89aAKfgEOjIcgANpqgC6jp1LrdcEQXodAwABgASRpq2H6WOi8VquWKpC+6V+62wyPogawDAUCyyAURZBVdKPB0NZOS6VphWCjAm1jsaoo60AblLzd+lVDstgNBQAClILUGiGEKAAD5NUDeoykTC4cIDafwP0DH4DhBDkfj2qwnulTIVStMFgNAAUlXbVd4aoGSEvKLVAEoN3vEHVbRtNjKClQGMAkaGIBp7zSGpYDVdE8X0SA0DoQgbwAIn0NCP3gzZ9GMegAkZG8cNpUAbwAKwnWAVWXVdwgAOSoGQP3qW1m1bSjJzqBpBlIGxyIwZFBlAL1ONgJdcBXCwGKYjAAwGC5bgBOAMHoBFSNpKCO0efh9V3d14APMcqLnUBFIwZTC3oD8ezxYxCACXBvnY01QICcD6m4oZN2Er03I8gYtMfWDpR7E9ezfDAb0GZZVngfRtgkQYbIFSLoti+x4sUDAqFuXBkp7IA">TypeScript Playground</a>.</p>

<p>In the end, this solution is very powerful, thanks to TypeScript’s extensive type system. Translations are no longer as error-prone as I know from my past. Overall, a single type definition increases the quality of the software and this quality can also be checked automatically at compile-time.</p>

<p>Comments are welcome on <a href="https://twitter.com/TheThomasPr/status/1509516711434895364">Twitter</a> or <a href="https://www.linkedin.com/posts/thomas-preissler_using-typescript-to-validate-translations-activity-6915282669471698944-PGmU">LinkedIn</a>.</p>]]></content><author><name>Thomas Preißler</name></author><summary type="html"><![CDATA[Translations stored in JSON can be validated at compile time with a TypeScript type definition to avoid runtime errors.]]></summary></entry><entry><title type="html">Implementing a timeline with scrolling and zooming - or how I failed at elementary school math</title><link href="https://thomas.preissler.me/blog/2022/01/10/implementing-a-timeline-with-scrolling-and-zooming-or-how-i-failed-at-elementary-school-math" rel="alternate" type="text/html" title="Implementing a timeline with scrolling and zooming - or how I failed at elementary school math" /><published>2022-01-10T20:18:32+00:00</published><updated>2022-01-10T20:18:32+00:00</updated><id>https://thomas.preissler.me/blog/2022/01/10/implementing-a-timeline-with-scrolling-and-zooming-or-how-i-failed-at-elementary-school-math</id><content type="html" xml:base="https://thomas.preissler.me/blog/2022/01/10/implementing-a-timeline-with-scrolling-and-zooming-or-how-i-failed-at-elementary-school-math"><![CDATA[<p>Recently I had the task of implementing a timeline. Not a big deal? You’re probably right, it’s just a bit of Flexbox magic. But there are three challenges:</p>

<ul>
  <li>The events in the timeline are not equally distributed and the space between the events need to follow that.</li>
  <li>Since the timeline might contain a huge amount of events, a user needs to be able to zoom into the timeline.</li>
  <li>If the full timeline is not visible anymore, the user needs to be able to scroll left and right by grabbing the timeline.</li>
</ul>

<p>I’ll omit any labels or fancy details and focus on the main challenges only.</p>

<ol>
  <li><a href="#fully-working-example">Fully working example</a></li>
  <li><a href="#easy-peasy-the-flexbox-magic">Easy Peasy - the Flexbox magic</a></li>
  <li><a href="#scrolling">Scrolling</a></li>
  <li><a href="#zooming-first-attempt">Zooming first attempt</a></li>
  <li><a href="#fix-the-calculations">Fix the calculations</a></li>
</ol>

<h2 id="fully-working-example">Fully working example</h2>

<p>First, let’s take a look at the fully working example. It will give a better impression of the solution than the dry list of requirements.</p>

<p>Use the mouse wheel to scroll in and out. Grab the timeline to move it left and right.</p>

<iframe src="https://thomas.preissler.me/timeline/" width="100%" style="border: 0; height: 104px; margin-bottom: 1.3rem;"></iframe>

<p>It’s implemented with pure HTML, CSS and JavaScript without a single dependency. 😇</p>

<p>You can find the full source code on <a href="https://github.com/ThomasPr/timeline">Github</a>.</p>

<h2 id="easy-peasy-the-flexbox-magic">Easy Peasy - the Flexbox magic</h2>

<p>Let’s get started: A simple timeline requires only very few lines of CSS. It fills the whole screen and rescales well for different screen sizes. It employs a simple Flexbox layout with a <code class="language-plaintext highlighter-rouge">flex-direction: row</code> to keep the events in a row. But the events should not be distributed evenly, the space between them should differ and be customizable.</p>

<p>Thanks to Flexbox it’s quite simple: Just put a <code class="language-plaintext highlighter-rouge">div</code> between the events that has a <code class="language-plaintext highlighter-rouge">flex-grow</code> property. A <code class="language-plaintext highlighter-rouge">div</code> with <code class="language-plaintext highlighter-rouge">flex-grow: 8</code> will get four times the space of a <code class="language-plaintext highlighter-rouge">flex-grow: 2</code>. The browser will then scale the size between the events accordingly to the <code class="language-plaintext highlighter-rouge">flex-grow</code> property. To put this abstract property to the timeline we can assume that the number of days between two events is set to the <code class="language-plaintext highlighter-rouge">flex-grow</code> property, e. g. if two events are 30 days apart, we would use <code class="language-plaintext highlighter-rouge">flex-grow: 30</code>. Easy peasy, right? I cannot image how painful an implemention would look like without the power of Flexbox.</p>

<p>The result looks quite good. And yet, it wasn’t a challenge to make it happen. So far, there is no reason for a longish blog post like this. But the task will get much harder in the next section. Be warned!</p>

<p>For now the <code class="language-plaintext highlighter-rouge">scrollable</code> and <code class="language-plaintext highlighter-rouge">zoomable</code> classes are needless, but they will get important very soon. I want to drop the full HTML and CSS here so that I don’t need to paste it later on again.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"scrollable"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"timeline zoomable"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"spacer"</span> <span class="na">style=</span><span class="s">"width: 26px;"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"event"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"spacer"</span> <span class="na">style=</span><span class="s">"flex-grow: 1;"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"event"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"spacer"</span> <span class="na">style=</span><span class="s">"flex-grow: 2;"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"event"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"spacer"</span> <span class="na">style=</span><span class="s">"flex-grow: 3;"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"event"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"spacer"</span> <span class="na">style=</span><span class="s">"flex-grow: 5;"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"event"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"spacer"</span> <span class="na">style=</span><span class="s">"flex-grow: 8;"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"event"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"spacer"</span> <span class="na">style=</span><span class="s">"width: 26px;"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.scrollable</span> <span class="p">{</span>
  <span class="nl">overflow-x</span><span class="p">:</span> <span class="nb">hidden</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.timeline</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
  <span class="nl">flex-direction</span><span class="p">:</span> <span class="n">row</span><span class="p">;</span>
  <span class="nl">align-items</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">104px</span><span class="p">;</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="m">#f2f3f3</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.event</span> <span class="p">{</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">26px</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">26px</span><span class="p">;</span>
  <span class="nl">border-radius</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="nb">rgb</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">127</span><span class="p">,</span> <span class="m">255</span><span class="p">);</span>
<span class="p">}</span>

<span class="nc">.spacer</span> <span class="p">{</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">6px</span><span class="p">;</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">127</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">0.5</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="scrolling">Scrolling</h2>

<p>Scrolling consists of multiple features:</p>
<ul>
  <li>change the mouse point to <code class="language-plaintext highlighter-rouge">grabbing</code> when pressing the mouse button and back to <code class="language-plaintext highlighter-rouge">grab</code> when releasing it</li>
  <li>save the mouse position whe pressing the mouse button</li>
  <li>move the timeline accordingly to the left or right when the mouse is moved and the button is pressed</li>
</ul>

<p>The latter feature is implemented by the <code class="language-plaintext highlighter-rouge">scrollLeft</code> property of the container. Every <code class="language-plaintext highlighter-rouge">div</code> has a <code class="language-plaintext highlighter-rouge">scrollLeft</code> property which is set to 0 by default. If the content of the container is wider than the container itself, the <code class="language-plaintext highlighter-rouge">scrollLeft</code> property can be used to drag the content to left so that the wider content can be capped on the left side.</p>

<p>An example: The visible container is 350 px wide and <code class="language-plaintext highlighter-rouge">overflow-x</code> is set to <code class="language-plaintext highlighter-rouge">hidden</code>. It contains an element with double width, i. e. 700 px. Without further specification, the browser would set the child element left-aligned with the visible container and cut off the right half. But with the help of the <code class="language-plaintext highlighter-rouge">scrollLeft</code> property the too wide child element can be dragged to the left, so that an arbitrary section can become visible. To show the center and cut off the same amount on both sides, <code class="language-plaintext highlighter-rouge">scrollLeft</code> would have to be set to 175 px in this example.</p>

<p><img src="/assets/images/2022-01-10/scrollLeft.svg" alt="Explaining the scrollLeft property" /></p>

<p>Since there is no way to ask the browser if a user has the mouse button pressed right now, we need to listen to the <code class="language-plaintext highlighter-rouge">mousedown</code> and <code class="language-plaintext highlighter-rouge">mouseup</code> events and to remember the state manually. In addition when the <code class="language-plaintext highlighter-rouge">mousedown</code> event fires, we save the current position of the mouse pointer and the current <code class="language-plaintext highlighter-rouge">scrollLeft</code> position as initial values. We need those values later on to calculate the mouse distance.</p>

<p>Actually, it’s quite simple to implement that. The full source code can be viewed on <a href="https://github.com/ThomasPr/timeline/blob/main/scrollable.js">Github</a>, I’ll walk through some major steps.</p>

<h3 id="mousedown">mousedown</h3>

<p>When the mouse button gets pressed, the current mouse position and the current <code class="language-plaintext highlighter-rouge">scrollLeft</code> value needs to be stored. In addition, the cursor style is changed to <code class="language-plaintext highlighter-rouge">grabbing</code>.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">scrollableElement</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">mousedown</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">mouseEvent</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">mouseDown</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
  <span class="nx">scrollableElement</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">cursor</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">grabbing</span><span class="dl">'</span><span class="p">;</span>
  <span class="nx">initialGrabPosition</span> <span class="o">=</span> <span class="nx">mouseEvent</span><span class="p">.</span><span class="nx">clientX</span><span class="p">;</span>
  <span class="nx">initialScrollPosition</span> <span class="o">=</span> <span class="nx">scrollableElement</span><span class="p">.</span><span class="nx">scrollLeft</span><span class="p">;</span>
<span class="p">});</span>
</code></pre></div></div>

<h3 id="mouseup">mouseup</h3>

<p>When the user releases the mouse button, the values that were changed in the <code class="language-plaintext highlighter-rouge">mousedown</code> event must be reset.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">scrollableElement</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">mouseup</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">mouseDown</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
  <span class="nx">scrollableElement</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">cursor</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">grab</span><span class="dl">'</span><span class="p">;</span>
<span class="p">});</span>
</code></pre></div></div>

<h3 id="mousemove">mousemove</h3>

<p>When the user moves the mouse, a very few mathematical calculations are required. The distance between the starting point of grabbing action and the current position of the mouse pointer must be computed and the value for <code class="language-plaintext highlighter-rouge">scrollLeft</code> must be reduced by exactly the same value.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">scrollableElement</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">mousemove</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">mouseEvent</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">mouseDown</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">mouseMovementDistance</span> <span class="o">=</span> <span class="nx">mouseEvent</span><span class="p">.</span><span class="nx">clientX</span> <span class="o">-</span> <span class="nx">initialGrabPosition</span><span class="p">;</span>
    <span class="nx">scrollableElement</span><span class="p">.</span><span class="nx">scrollLeft</span> <span class="o">=</span> <span class="nx">initialScrollPosition</span> <span class="o">-</span> <span class="nx">mouseMovementDistance</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre></div></div>

<p>That’s it. Now the user can move the timeline left and right if it doesn’t fit on the screen. By default, the timeline is exactly as wide as the window, so the next task will be to implement the zoom behavior to actually use the scrolling feature.</p>

<h2 id="zooming-first-attempt">Zooming - first attempt</h2>

<p>The first challenge will be a draft implementation of the zooming feature. Spoiler: it won’t work as excepted and it took me ages to figure out whats going wrong.</p>

<p>The idea of the zoom function is to enlarge the timeline beyond the visible width by using the <code class="language-plaintext highlighter-rouge">width</code> property and set it to more than 100 % for the timeline itself and <code class="language-plaintext highlighter-rouge">overflow-x: hidden</code> for the its parent. The result is a timeline that is larger than the visible screen, but cropped to the original size. The spacing between events is doubled, so it feels like the timeline has been zoomed in.</p>

<p>If the width of the child element changes, it gets stretched to the right and therefore cropped on the right. To change the focus, the <code class="language-plaintext highlighter-rouge">scrollLeft</code> property needs to be changed accordingly.</p>

<p>My first attempt was to calculate the <code class="language-plaintext highlighter-rouge">scrollLeft</code> property according to the mouse position. If the mouse pointer is between the third and the fourth quarter and the user zooms in, the mouse pointer has to stay on that point. So the user has to move the timeline in such a way that the he gets the impression of thetimeline moving around his mouse pointer. It looks like he zoomed in at that exact spot. My first (and incorrect) assumption was to simply calculate the space difference and increase the <code class="language-plaintext highlighter-rouge">scrollLeft</code> property to match the mouse position accordingly.</p>

<p>An example: The timeline has a width of 100 px, we zoom in to make the timeline 200 px wide, so it has doubled in size. The mouse pointer is positioned between the third and fourth quarter, where it must be positioned also after zooming.</p>

<p><img src="/assets/images/2022-01-10/zooming-simple-before.svg" alt="View of the Timeline before zooming" /></p>

<p><code class="language-plaintext highlighter-rouge">scrollLeft</code> must be computed in such a way that 75 % of the timeline is still on the left of the mouse pointer after zooming. In this example <code class="language-plaintext highlighter-rouge">scrollLeft</code> is increased by 100 px * 0.75, so it gets the value 263.</p>

<p><img src="/assets/images/2022-01-10/zooming-simple-after.svg" alt="View of the Timeline after zooming" /></p>

<p>Looks simple? Yes, it actually is. But …</p>

<h2 id="does-it-work">Does it work?</h2>

<p>Let’s look again at the example of the timeline, which is zoomed in by the factor 2. This time, however, the example timeline will be in a more detailed way, representing the events and spaces between them.</p>

<p><img src="/assets/images/2022-01-10/zooming-timeline-before.svg" alt="View of the Timeline before zooming" /></p>

<p>The mouse pointer is again positioned at three-quarters, which in this example is at the end of the last element.</p>

<p>In the next step, the user zooms into the timeline so that the width increases to twice the original width.The algorithm is applied and the mouse pointer is moved back to its original position. Before and after zooming, the mouse pointer is over a point that is about three quarters wide.</p>

<p><img src="/assets/images/2022-01-10/zooming-timeline-after.svg" alt="View of the Timeline after zooming" /></p>

<p>The result is as expected. Or is it? The mouse pointer has the correct position relative to the timeline itself, but the mouse pointer is far away from the last element and no longer right next to it. To the user, it no longer seems as if the center of the zooming is below the mouse pointer. But that is exactly the expected behavior.</p>

<p>What should it look like properly?</p>

<p><img src="/assets/images/2022-01-10/expected-timeline-movement.svg" alt="Expected Timeline movement" /></p>

<p>It is clear to see that the timeline is pushed significantly further to the right than the algorithm did. As can be seen, the <code class="language-plaintext highlighter-rouge">scrollLeft</code> property must be only roughly half the size. Where is the difference compared to the first simple example?</p>

<p>Well, … The timeline consists of variable spacing between the points and the points themselves with fixed width. When the user scales the timeline, the spaces are changed, but the events are not.</p>

<p>Simple example:
Assume a Timeline which consists on the left half of 2 points with one length unit each, in addition there are 2 spaces with two length units each. In total, the left half of this imaginary Timeline is 6 length units (2*1 + 2*2).
The right half consists of only one distance with 6 length units.</p>

<p><img src="/assets/images/2022-01-10/example1.svg" alt="before zooming" /></p>

<p>If the user increases the timeline by a factor of two, all spacings get doubled, but not the events. On the left side the resulting size is 10 (2*1 + 2*4), whereas on the right half the distance doubles to 12. Thus the center of the timeline has shifted.</p>

<p><img src="/assets/images/2022-01-10/example2.svg" alt="before zooming" /></p>

<p>For single elements like an image the simple algorithm works well. Even if all elements scale the same, it works. But the timeline consists of the variable spacing between the points and the points with fixed widths. The effect is that the timeline does not scale proportionally.</p>

<p>This finding took me several days (and sleepless nights). In the end, the problem was simply some elementary school math.</p>

<h2 id="fix-the-calculations">Fix the calculations</h2>

<p>The idea of the algorithm was quite correct. The timeline must be moved so that the event under the mouse pointer is fixed. The only difference is that this point not point of the timeline as a whole, but a child element of the timeline.</p>

<p>First, it needs to be identified at which event or space the mouse pointer is located and relative to that element the original algorithm can be applied. In the example from above, the last point of the timeline is identified as the element below the mouse pointer. Relative to this element, the mouse pointer is at the very end. And it is exactly this position that we would have to reach again after zooming.</p>

<p>This sounds quite simple, but for the calculation of the <code class="language-plaintext highlighter-rouge">scrollLeft</code> property there are some additional information required. The position of the mouse pointer is measured from the edge of the screen. To compute the correct value the algorithm also needs all other relevant values in relation to the edge of the screen. This includes the distance of the timeline, its parent container as well as the the child element within the timeline where the mouse pointer is positioned.</p>

<p>The code for this looks like this:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">mousePosition</span> <span class="o">=</span> <span class="nx">wheelEvent</span><span class="p">.</span><span class="nx">clientX</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">elementUnderMouseLeft</span> <span class="o">=</span> <span class="nx">getLeft</span><span class="p">(</span><span class="nx">elementUnderMouse</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">zoomableLeft</span> <span class="o">=</span> <span class="nx">getLeft</span><span class="p">(</span><span class="nx">zoomableElement</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">containerLeft</span> <span class="o">=</span> <span class="nx">getLeft</span><span class="p">(</span><span class="nx">containerElement</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">moveAfterZoom</span> <span class="o">=</span> <span class="nx">getWidth</span><span class="p">(</span><span class="nx">elementUnderMouse</span><span class="p">)</span> <span class="o">*</span> <span class="nx">mousePositionRelative</span><span class="p">;</span>

<span class="nx">containerElement</span><span class="p">.</span><span class="nx">scrollLeft</span> <span class="o">=</span>
  <span class="nx">elementUnderMouseLeft</span>
  <span class="o">-</span> <span class="nx">zoomableLeft</span>
  <span class="o">-</span> <span class="nx">mousePosition</span>
  <span class="o">+</span> <span class="nx">containerLeft</span>
  <span class="o">+</span> <span class="nx">moveAfterZoom</span><span class="p">;</span>
</code></pre></div></div>

<p>You can find the full source of the zooming feature code on <a href="https://github.com/ThomasPr/timeline/blob/main/scrollable.js">Github</a>.</p>

<p>Comments are welcome on <a href="https://twitter.com/TheThomasPr/status/1481350578689167371">Twitter</a> or <a href="https://www.linkedin.com/posts/thomas-preissler_implementing-a-timeline-with-scrolling-and-activity-6887116328415596544-E2-y">LinkedIn</a>.</p>]]></content><author><name>Thomas Preißler</name></author><summary type="html"><![CDATA[I had to implement a timeline that can be scrolled and zoomed. I faced some challenges, but was doing quite well. Until I ran into some issues that took quite some time to work out. In the end, I failed measurably at some very basic elementary school math.]]></summary></entry><entry><title type="html">Release memory back to the OS with Java 11</title><link href="https://thomas.preissler.me/blog/2021/05/02/release-memory-back-to-the-os-with-java-11" rel="alternate" type="text/html" title="Release memory back to the OS with Java 11" /><published>2021-05-02T14:19:03+00:00</published><updated>2021-05-02T14:19:03+00:00</updated><id>https://thomas.preissler.me/blog/2021/05/02/release-memory-back-to-the-os-with-java-11</id><content type="html" xml:base="https://thomas.preissler.me/blog/2021/05/02/release-memory-back-to-the-os-with-java-11"><![CDATA[<p>I’m responsible for a Java application running in OpenShift. This application has to process a huge amount of data occassionally, but most of the time the application idles and waits for new input.</p>

<p>The application takes a huge amount of memory during processing the data. But when the processing job has been completed, the memory can be released and returned to the operating system. Unfortunately, this doesn’t happen. The JVM seems to keep the memory forever.</p>

<p><img src="/assets/images/2021-05-02/os1.png" alt="OpenShift Metrics" /></p>

<h2 id="whats-going-on">What’s going on?</h2>

<blockquote>
  <p>Currently the G1 garbage collector may not return committed Java heap memory to the operating system in a timely manner. G1 only returns memory from the Java heap at either a full GC or during a concurrent cycle. Since G1 tries hard to completely avoid full GCs, and only triggers a concurrent cycle based on Java heap occupancy and allocation activity, it will not return Java heap memory in many cases unless forced to do so externally. – <a href="https://openjdk.java.net/jeps/346">JEP 346</a></p>
</blockquote>

<p>The motivation of JEP 346 describes perfectly what I observed from my application. When it should release memory, there’s no need anymore to run the garbage collector at all. Therefore, it will keep the memory until the next huge processing phase starts and requires the memory again.</p>

<h2 id="how-can-this-be-fixed">How can this be fixed?</h2>

<p><a href="https://openjdk.java.net/jeps/346">JEP 346</a> has exactly this issue in mind: Promptly Return Unused Committed Memory from G1. JEP 346 has been implemented in Java 12. Unfortunately, I have to use Java 11 and cannot benefit from this improvment.</p>

<p>But there are other garbage collectors than the default G1. <a href="https://jelastic.com/blog/tuning-garbage-collector-java-memory-usage-optimization/">Ruslan Synytsky</a> has a well-written blog post about the memory consumption of different garbage collectors.</p>

<p>Based on his observations there’s a huge difference in the behaviour of the memory consumption. It seems that the Shenandoah GC might be a really good option for my application. Next to ZGC, Shenandoah is one of the newest garbage collectors and available as production ready in Java 15. But Shenandoah has been backported to OpenJDK 11 and is available since version 11.0.9. Therefore I’m able to use it. Let’s give it a try:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>java -XX:+UseShenandoahGC -jar app.jar
</code></pre></div></div>

<p><img src="/assets/images/2021-05-02/os2.png" alt="OpenShift Metrics" /></p>

<p>It works! As you can see, some time after finishing the hard processing work, Shenandoah returns most of the memory back to the operating system.</p>

<p>Since reducing the heap is an expensive operation, Shenandoah takes a delay of 5 minutes (300,000 ms) by default to release any memory back to the operating system. You can set Shenandoah to be more aggressive, but the command line options for tuning Shenandoah are still marked as experimental. However, I’m fine with the default 5 minute delay.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>java <span class="se">\</span>
  <span class="nt">-XX</span>:+UseShenandoahGC <span class="se">\</span>
  <span class="nt">-XX</span>:+UnlockExperimentalVMOptions <span class="se">\</span>
  <span class="nt">-XX</span>:ShenandoahUncommitDelay<span class="o">=</span>1000 <span class="se">\</span>
  <span class="nt">-XX</span>:ShenandoahGuaranteedGCInterval<span class="o">=</span>10000 <span class="se">\</span>
  <span class="nt">-jar</span> app.jar
</code></pre></div></div>

<p>Comments are welcome on <a href="https://twitter.com/TheThomasPr/status/1388916641178718208">Twitter</a> or <a href="https://www.linkedin.com/posts/thomas-preissler_release-memory-back-to-the-os-with-java-11-activity-6857659740864987136-oBwF">LinkedIn</a>.</p>

<h2 id="links">Links</h2>

<ul>
  <li><a href="https://openjdk.java.net/jeps/346">JEP 346: Promptly Return Unused Committed Memory from G1</a></li>
  <li><a href="https://jelastic.com/blog/tuning-garbage-collector-java-memory-usage-optimization/">Garbage Collector Tuning as the First Step to Java Memory Usage Optimization</a></li>
  <li><a href="http://clojure-goes-fast.com/blog/shenandoah-in-production/">Shenandoah GC in production: experience report</a></li>
  <li><a href="https://stackoverflow.com/questions/30458195/does-gc-release-back-memory-to-os">Stackoverflow: Does GC release back memory to OS?</a></li>
  <li><a href="https://stackoverflow.com/questions/59362760/does-g1gc-release-back-memory-to-the-os-even-if-xms-xmx">Stackoverflow: Does G1 GC release back memory to the OS even if Xms = Xmx?</a></li>
</ul>]]></content><author><name>Thomas Preißler</name></author><summary type="html"><![CDATA[Java 11 is by default very reluctant to release unnecessary memory back to the operation system. The Shenandoah GC is more aggressive and available in Java 11.]]></summary></entry><entry><title type="html">Java Streams are not always a good fit for readability</title><link href="https://thomas.preissler.me/blog/2021/03/25/java-streams-are-not-always-a-good-fit-for-readability" rel="alternate" type="text/html" title="Java Streams are not always a good fit for readability" /><published>2021-03-25T22:03:03+00:00</published><updated>2021-03-25T22:03:03+00:00</updated><id>https://thomas.preissler.me/blog/2021/03/25/java-streams-are-not-always-a-good-fit-for-readability</id><content type="html" xml:base="https://thomas.preissler.me/blog/2021/03/25/java-streams-are-not-always-a-good-fit-for-readability"><![CDATA[<p>I really like functional programming, it offers powerful expressions with only a few lines of code. When Streams have been introduced in Java 8, they where a huge improvement for someone like me who got used to ruby and its functional power for quite some time.</p>

<p>Even if Java Streams are a good choice for many problems, they might be not the best choice for readability. I want to show you an example where I struggeled for a good solution. Java Streams sound like the perfect solution for that kind of problem.</p>

<p>But let’s get started:</p>

<h2 id="the-problem">The problem</h2>

<p>I cannot give any details about the actual business requirement about that. But I hopefully got a really neat story instead.</p>

<p>I want to get a list of all people and their pets and the possibiliets they can go for a walk. Each person wants to walk with all of their pets in all possible combinations. But it is not allowed two walk two pets of the same kind at the same time.</p>

<p>Example: Thomas has two dogs, two cats and a pig. The result shold be:</p>

<table>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Thomas</code></td>
      <td><code class="language-plaintext highlighter-rouge">Dog 1</code></td>
      <td><code class="language-plaintext highlighter-rouge">Cat 1</code></td>
      <td><code class="language-plaintext highlighter-rouge">Pig</code></td>
      <td> </td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Thomas</code></td>
      <td><code class="language-plaintext highlighter-rouge">Dog 2</code></td>
      <td><code class="language-plaintext highlighter-rouge">Cat 1</code></td>
      <td><code class="language-plaintext highlighter-rouge">Pig</code></td>
      <td> </td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Thomas</code></td>
      <td><code class="language-plaintext highlighter-rouge">Dog 1</code></td>
      <td><code class="language-plaintext highlighter-rouge">Cat 2</code></td>
      <td><code class="language-plaintext highlighter-rouge">Pig</code></td>
      <td> </td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Thomas</code></td>
      <td><code class="language-plaintext highlighter-rouge">Dog 2</code></td>
      <td><code class="language-plaintext highlighter-rouge">Cat 2</code></td>
      <td><code class="language-plaintext highlighter-rouge">Pig</code></td>
      <td> </td>
    </tr>
  </tbody>
</table>

<p>Keep in mind that even if Thomas would have no cat, he wants wo walk his dogs and his pig.</p>

<table>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Thomas</code></td>
      <td><code class="language-plaintext highlighter-rouge">Dog 1</code></td>
      <td> </td>
      <td><code class="language-plaintext highlighter-rouge">Pig</code></td>
      <td> </td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Thomas</code></td>
      <td><code class="language-plaintext highlighter-rouge">Dog 2</code></td>
      <td> </td>
      <td><code class="language-plaintext highlighter-rouge">Pig</code></td>
      <td> </td>
    </tr>
  </tbody>
</table>

<h2 id="start-with-some-coding">Start with some coding</h2>

<p>The people and animals are fetched from independent external sources and could look like that:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">people</span> <span class="o">=</span> <span class="n">getPeopleInTown</span><span class="o">(</span><span class="s">"Freiburg"</span><span class="o">);</span>

<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Cat</span><span class="o">&gt;&gt;</span> <span class="o">=</span> <span class="n">getCatsForPeople</span><span class="o">(</span><span class="n">people</span><span class="o">);</span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Dog</span><span class="o">&gt;&gt;</span> <span class="o">=</span> <span class="n">getDogsForPeople</span><span class="o">(</span><span class="n">people</span><span class="o">);</span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Pig</span><span class="o">&gt;&gt;</span> <span class="o">=</span> <span class="n">getPigsForPeople</span><span class="o">(</span><span class="n">people</span><span class="o">);</span>
</code></pre></div></div>

<p>To model a <code class="language-plaintext highlighter-rouge">Walk</code> the simple Java class will be used:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Walk</span> <span class="o">{</span>

	<span class="nc">String</span> <span class="n">person</span><span class="o">;</span>
	<span class="nc">Cat</span> <span class="n">cat</span><span class="o">;</span>
	<span class="nc">Dog</span> <span class="n">dog</span><span class="o">;</span>
	<span class="nc">Pig</span> <span class="n">pig</span><span class="o">;</span>

	<span class="kd">public</span> <span class="nf">Walk</span><span class="o">(</span><span class="nc">String</span> <span class="n">person</span><span class="o">,</span> <span class="nc">Cat</span> <span class="n">cat</span><span class="o">,</span> <span class="nc">Dog</span> <span class="n">dog</span><span class="o">,</span> <span class="nc">Pig</span> <span class="n">pig</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">person</span> <span class="o">=</span> <span class="n">person</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">cat</span> <span class="o">=</span> <span class="n">cat</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">dog</span> <span class="o">=</span> <span class="n">dog</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">pig</span> <span class="o">=</span> <span class="n">pig</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="c1">// getters and setters omitted for brevity</span>
<span class="o">}</span>
</code></pre></div></div>

<p>To build the walk, we introduce a <code class="language-plaintext highlighter-rouge">buildWalks</code> method.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Walk</span><span class="o">&gt;</span> <span class="nf">buildWalks</span><span class="o">(</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">people</span><span class="o">,</span>
    <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Cat</span><span class="o">&gt;&gt;</span> <span class="n">cats</span><span class="o">,</span>
    <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Dog</span><span class="o">&gt;&gt;</span> <span class="n">dogs</span><span class="o">,</span>
    <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Pig</span><span class="o">&gt;&gt;</span> <span class="n">pigs</span><span class="o">)</span> <span class="o">{</span>

  <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Walk</span><span class="o">&gt;</span> <span class="n">walks</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

  <span class="c1">// do the magic</span>

  <span class="k">return</span> <span class="n">walks</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="the-naive-implementation">The naive implementation</h2>

<p>My first appraoch was to use just a couple of <code class="language-plaintext highlighter-rouge">for</code>-loops. It looks gorgeous and is easy to read.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Walk</span><span class="o">&gt;</span> <span class="nf">buildWalks</span><span class="o">(</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">people</span><span class="o">,</span>
    <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Cat</span><span class="o">&gt;&gt;</span> <span class="n">cats</span><span class="o">,</span>
    <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Dog</span><span class="o">&gt;&gt;</span> <span class="n">dogs</span><span class="o">,</span>
    <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Pig</span><span class="o">&gt;&gt;</span> <span class="n">pigs</span><span class="o">)</span> <span class="o">{</span>

  <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Walk</span><span class="o">&gt;</span> <span class="n">walks</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

  <span class="k">for</span><span class="o">(</span><span class="nc">String</span> <span class="n">person</span> <span class="o">:</span> <span class="n">people</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">for</span> <span class="o">(</span><span class="nc">Cat</span> <span class="n">cat</span> <span class="o">:</span> <span class="n">cats</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">person</span><span class="o">))</span> <span class="o">{</span>
      <span class="k">for</span> <span class="o">(</span><span class="nc">Dog</span> <span class="n">dog</span> <span class="o">:</span> <span class="n">dogs</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">person</span><span class="o">))</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">Pig</span> <span class="n">pig</span> <span class="o">:</span> <span class="n">pigs</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">person</span><span class="o">))</span> <span class="o">{</span>
          <span class="n">walks</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Walk</span><span class="o">(</span><span class="n">person</span><span class="o">,</span> <span class="n">cat</span><span class="o">,</span> <span class="n">dog</span><span class="o">,</span> <span class="n">pig</span><span class="o">));</span>
        <span class="o">}</span>
      <span class="o">}</span>
    <span class="o">}</span>
  <span class="o">}</span>

  <span class="k">return</span> <span class="n">walks</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Unfortunately, it doesn’t work. If Thomas has no cat, he won’t be able to do any walk. That’s bad for his other pets.</p>

<p>If the list of cats is empty, the <code class="language-plaintext highlighter-rouge">for</code>-loop will not be executed and therefore the <code class="language-plaintext highlighter-rouge">walks.add()</code>-method will never be called.</p>

<p>Ok, let’s fix it. We need to make sure that every <code class="language-plaintext highlighter-rouge">for</code>-loop will be executed at least once:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Walk</span><span class="o">&gt;</span> <span class="nf">buildWalks</span><span class="o">(</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">people</span><span class="o">,</span>
    <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Cat</span><span class="o">&gt;&gt;</span> <span class="n">cats</span><span class="o">,</span>
    <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Dog</span><span class="o">&gt;&gt;</span> <span class="n">dogs</span><span class="o">,</span>
    <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Pig</span><span class="o">&gt;&gt;</span> <span class="n">pigs</span><span class="o">)</span> <span class="o">{</span>

  <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Walk</span><span class="o">&gt;</span> <span class="n">walks</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

  <span class="k">for</span><span class="o">(</span><span class="nc">String</span> <span class="n">person</span> <span class="o">:</span> <span class="n">people</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">for</span> <span class="o">(</span><span class="nc">Cat</span> <span class="n">cat</span> <span class="o">:</span> <span class="n">atLeastOnce</span><span class="o">(</span><span class="n">cats</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">person</span><span class="o">)))</span> <span class="o">{</span>
      <span class="k">for</span> <span class="o">(</span><span class="nc">Dog</span> <span class="n">dog</span> <span class="o">:</span> <span class="n">atLeastOnce</span><span class="o">(</span><span class="n">dogs</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">person</span><span class="o">)))</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">Pig</span> <span class="n">pig</span> <span class="o">:</span> <span class="n">atLeastOnce</span><span class="o">(</span><span class="n">pigs</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">person</span><span class="o">)))</span> <span class="o">{</span>
          <span class="n">walks</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Walk</span><span class="o">(</span><span class="n">person</span><span class="o">,</span> <span class="n">cat</span><span class="o">,</span> <span class="n">dog</span><span class="o">,</span> <span class="n">pig</span><span class="o">));</span>
        <span class="o">}</span>
      <span class="o">}</span>
    <span class="o">}</span>
  <span class="o">}</span>

  <span class="k">return</span> <span class="n">walks</span><span class="o">;</span>
<span class="o">}</span>

<span class="kd">private</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">atLeastOnce</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">animals</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">if</span> <span class="o">(</span><span class="n">animals</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">animals</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">getNulledList</span><span class="o">();</span>
  <span class="o">}</span>
  <span class="k">return</span> <span class="n">animals</span><span class="o">;</span>
<span class="o">}</span>

<span class="kd">private</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">getNulledList</span><span class="o">()</span> <span class="o">{</span>
  <span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
  <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
  <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="streams-to-the-rescue">Streams to the rescue?</h2>

<p>Let’s use Java Streams to implement the <code class="language-plaintext highlighter-rouge">buildWalks()</code> again.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Walk</span><span class="o">&gt;</span> <span class="nf">buildWalks</span><span class="o">(</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">names</span><span class="o">,</span>
    <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Cat</span><span class="o">&gt;&gt;</span> <span class="n">cats</span><span class="o">,</span>
    <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Dog</span><span class="o">&gt;&gt;</span> <span class="n">dogs</span><span class="o">,</span>
    <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Pig</span><span class="o">&gt;&gt;</span> <span class="n">pigs</span><span class="o">)</span> <span class="o">{</span>

  <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Walk</span><span class="o">&gt;</span> <span class="n">walks</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

  <span class="n">names</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">name</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="n">forEachAtLeastOnce</span><span class="o">(</span><span class="n">cats</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">),</span> <span class="n">cat</span> <span class="o">-&gt;</span> <span class="o">{</span>
      <span class="n">forEachAtLeastOnce</span><span class="o">(</span><span class="n">dogs</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">),</span> <span class="n">dog</span> <span class="o">-&gt;</span> <span class="o">{</span>
        <span class="n">forEachAtLeastOnce</span><span class="o">(</span><span class="n">pigs</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">),</span> <span class="n">pig</span> <span class="o">-&gt;</span> <span class="o">{</span>
          <span class="n">walks</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Walk</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">cat</span><span class="o">,</span> <span class="n">dog</span><span class="o">,</span> <span class="n">pig</span><span class="o">));</span>
        <span class="o">});</span>
      <span class="o">});</span>
    <span class="o">});</span>
  <span class="o">});</span>

  <span class="k">return</span> <span class="n">walks</span><span class="o">;</span>
<span class="o">}</span>

<span class="kd">private</span> <span class="no">T</span> <span class="nf">forEachAtLeastOnce</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">animals</span><span class="o">,</span> <span class="nc">Consumer</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">consumer</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">if</span> <span class="o">(</span><span class="n">animals</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">animals</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
    <span class="n">consumer</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
  <span class="o">}</span>
  <span class="n">animals</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">consumer</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>If you look at the code, do you see at a glance what’s going on? Indee, I need some time to read through every single line to know what the method actually returns.</p>

<h2 id="conclusion">Conclusion</h2>

<p>The main difference of the implementations is the idea how the permuations will be created.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span><span class="o">(</span><span class="nc">String</span> <span class="n">person</span> <span class="o">:</span> <span class="n">people</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">for</span> <span class="o">(</span><span class="nc">Cat</span> <span class="n">cat</span> <span class="o">:</span> <span class="n">atLeastOnce</span><span class="o">(</span><span class="n">cats</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">person</span><span class="o">)))</span> <span class="o">{</span>
    <span class="k">for</span> <span class="o">(</span><span class="nc">Dog</span> <span class="n">dog</span> <span class="o">:</span> <span class="n">atLeastOnce</span><span class="o">(</span><span class="n">dogs</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">person</span><span class="o">)))</span> <span class="o">{</span>
      <span class="k">for</span> <span class="o">(</span><span class="nc">Pig</span> <span class="n">pig</span> <span class="o">:</span> <span class="n">atLeastOnce</span><span class="o">(</span><span class="n">pigs</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">person</span><span class="o">)))</span> <span class="o">{</span>
        <span class="n">walks</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Walk</span><span class="o">(</span><span class="n">person</span><span class="o">,</span> <span class="n">cat</span><span class="o">,</span> <span class="n">dog</span><span class="o">,</span> <span class="n">pig</span><span class="o">));</span>
      <span class="o">}</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">names</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">name</span> <span class="o">-&gt;</span> <span class="o">{</span>
  <span class="n">forEachAtLeastOnce</span><span class="o">(</span><span class="n">cats</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">),</span> <span class="n">cat</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="n">forEachAtLeastOnce</span><span class="o">(</span><span class="n">dogs</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">),</span> <span class="n">dog</span> <span class="o">-&gt;</span> <span class="o">{</span>
      <span class="n">forEachAtLeastOnce</span><span class="o">(</span><span class="n">pigs</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">),</span> <span class="n">pig</span> <span class="o">-&gt;</span> <span class="o">{</span>
        <span class="n">walks</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Walk</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">cat</span><span class="o">,</span> <span class="n">dog</span><span class="o">,</span> <span class="n">pig</span><span class="o">));</span>
      <span class="o">});</span>
    <span class="o">});</span>
  <span class="o">});</span>
<span class="o">});</span>
</code></pre></div></div>

<p>If you read the code, do you prefer nested for-loops or streams?</p>

<p>IMHO the nested for-loops can be understood more easily than streams. Therefore, I prefer the nested for-loops.</p>

<p>Please keep in mind, that Java Streams is a powerful performance improvement when you have to deal with large data sets. But you need to take special attention on readability if you don’t want to get a trade-off for your readers.</p>

<p>Comments are welcome on <a href="https://twitter.com/TheThomasPr/status/1375360481205088256">Twitter</a> or <a href="https://www.linkedin.com/posts/thomas-preissler_java-streams-are-not-always-a-good-fit-for-activity-6857659454754754560-IJmU">LinkedIn</a>.</p>]]></content><author><name>Thomas Preißler</name></author><summary type="html"><![CDATA[Java Streams are powerful but need to get special attention to keep the implementation readable.]]></summary></entry><entry><title type="html">Predicate.not for filtering Java Streams</title><link href="https://thomas.preissler.me/blog/2021/01/10/predicate-not-for-filtering-java-streams" rel="alternate" type="text/html" title="Predicate.not for filtering Java Streams" /><published>2021-01-10T14:07:00+00:00</published><updated>2021-01-10T14:07:00+00:00</updated><id>https://thomas.preissler.me/blog/2021/01/10/predicate-not-for-filtering-java-streams</id><content type="html" xml:base="https://thomas.preissler.me/blog/2021/01/10/predicate-not-for-filtering-java-streams"><![CDATA[<p>Let’s start with an example:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">userList</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
  <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">user</span> <span class="o">-&gt;</span> <span class="n">user</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
  <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">user</span> <span class="o">-&gt;</span> <span class="o">!</span><span class="n">user</span><span class="o">.</span><span class="na">isActivated</span><span class="o">())</span>
  <span class="o">.</span><span class="na">count</span><span class="o">();</span>
</code></pre></div></div>

<p>The idea of this code snippet is to count all deactivated users. At first we have to filter all nulls and secondly remove all activated users. The remaining list entries can just be counted.</p>

<p>I want to focus on the two <code class="language-plaintext highlighter-rouge">filter</code> methods. IMHO using method references should be preferred. Let me show that by an example which filters for the opposite. Please keep in mind that this will throw a <code class="language-plaintext highlighter-rouge">NullPointerException</code> since we call <code class="language-plaintext highlighter-rouge">isActivated</code> only on nulls.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">userList</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
  <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="nl">Objects:</span><span class="o">:</span><span class="n">isNull</span><span class="o">)</span>
  <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="nl">User:</span><span class="o">:</span><span class="n">isActivated</span><span class="o">)</span>
  <span class="o">.</span><span class="na">count</span><span class="o">();</span>
</code></pre></div></div>

<p>Wouldn’t you agree that the method reference <code class="language-plaintext highlighter-rouge">User::isActivated</code> is much easier to read than <code class="language-plaintext highlighter-rouge">user -&gt; !user.isActivated()</code>? But we do not want to filter for activated users, but for de-activated users. We could achieve that be implementing a <code class="language-plaintext highlighter-rouge">isDeactivated</code> method in the User class, but I want to show you a different way.</p>

<p>It’s the very same idea for remove null objects from the list. It’s really nice to just write <code class="language-plaintext highlighter-rouge">.filter(Objects::isNull)</code> to find only nulls, but I always wrote <code class="language-plaintext highlighter-rouge">.filter(u -&gt; u != null)</code> in the past to get only non-nulls.</p>

<p>Until today, I never took the time to look for an easier way. But there are two very nice (and obvious) solutions:</p>

<h2 id="objectsnonnull">Objects::nonNull</h2>

<p>In the <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Objects.html">Objects class</a> there exists not only the <code class="language-plaintext highlighter-rouge">isNull</code> method, but also <code class="language-plaintext highlighter-rouge">nonNull</code> to achieve exactly the behaviour I need.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">userList</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
  <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="nl">Objects:</span><span class="o">:</span><span class="n">nonNull</span><span class="o">)</span>
  <span class="o">.</span><span class="na">count</span><span class="o">()</span>
</code></pre></div></div>

<h2 id="predicatenot">Predicate::not</h2>

<p>The <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/function/Predicate.html">Predicate interface</a> has a handy <code class="language-plaintext highlighter-rouge">not</code> method to negate any Predicate. It’s concise and easy to understand when using a static import for the <code class="language-plaintext highlighter-rouge">Predicate.not</code> method</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">userList</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
  <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">not</span><span class="o">(</span><span class="nl">Objects:</span><span class="o">:</span><span class="n">isNull</span><span class="o">))</span>
  <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">not</span><span class="o">(</span><span class="nl">User:</span><span class="o">:</span><span class="n">isActivated</span><span class="o">))</span>
  <span class="o">.</span><span class="na">count</span><span class="o">();</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">Predicate.not</code> is more powerful, it allows to negate any filter option, e.g. to remove empty lists out of a list of lists:</p>

<p>By combining the two approaches, we are again able to use method references to count all deactivated users:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">userList</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
  <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="nl">Objects:</span><span class="o">:</span><span class="n">nonNull</span><span class="o">)</span>
  <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">not</span><span class="o">(</span><span class="nl">User:</span><span class="o">:</span><span class="n">isActivated</span><span class="o">)</span>
  <span class="o">.</span><span class="na">count</span><span class="o">();</span>
</code></pre></div></div>

<p>Filtering Java Streams can be very concise by using method references. To achieve the opposite of a provided method, Predicate.not is a handy solution.</p>

<p>Comments are welcome on <a href="https://twitter.com/TheThomasPr/status/1348273079500333058">Twitter</a>.</p>]]></content><author><name>Thomas Preißler</name></author><summary type="html"><![CDATA[Predicate.not is handy to filter streams with method references for the opposite of a provided method]]></summary></entry><entry><title type="html">Build a Cartesian Product with Java Streams</title><link href="https://thomas.preissler.me/blog/2020/12/29/permutations-using-java-streams" rel="alternate" type="text/html" title="Build a Cartesian Product with Java Streams" /><published>2020-12-29T20:40:00+00:00</published><updated>2020-12-29T20:40:00+00:00</updated><id>https://thomas.preissler.me/blog/2020/12/29/permutations-using-java-streams</id><content type="html" xml:base="https://thomas.preissler.me/blog/2020/12/29/permutations-using-java-streams"><![CDATA[<p>Recently, I ran over an old post by Baeldung: <a href="https://www.baeldung.com/java-array-permutations">Permutations of an Array in Java
</a>. He presented very well solutions, as usual. I just want to provide another point of view: Readability. IMHO, readability is one of the most important aspects for code. Some time ago I had to solve a similiar issue and used Java Streams to create a Cartesian Product out of Lists.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">static</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Collections</span><span class="o">.</span><span class="na">unmodifiableList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">stream</span><span class="o">.</span><span class="na">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Objects</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.function.BinaryOperator</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.stream.Stream</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">CartesianProductUtil</span> <span class="o">{</span>

  <span class="kd">private</span> <span class="nf">CartesianProductUtil</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>

  <span class="cm">/**
   * Compute the cartesian product for n lists.
   * The algorithm employs that A x B x C = (A x B) x C
   *
   * @param listsToJoin [a, b], [x, y], [1, 2]
   * @return [a, x, 1], [a, x, 2], [a, y, 1], [a, y, 2], [b, x, 1], [b, x, 2], [b, y, 1], [b, y, 2]
   */</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;&gt;</span> <span class="nf">cartesianProduct</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;&gt;</span> <span class="n">listsToJoin</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">listsToJoin</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
      <span class="k">return</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
    <span class="o">}</span>

    <span class="n">listsToJoin</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">listsToJoin</span><span class="o">);</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">firstListToJoin</span> <span class="o">=</span> <span class="n">listsToJoin</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
    <span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;&gt;</span> <span class="n">startProduct</span> <span class="o">=</span> <span class="n">joinLists</span><span class="o">(</span><span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;(),</span> <span class="n">firstListToJoin</span><span class="o">);</span>

    <span class="nc">BinaryOperator</span><span class="o">&lt;</span><span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;&gt;&gt;</span> <span class="n">noOp</span> <span class="o">=</span> <span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="kc">null</span><span class="o">;</span>

    <span class="k">return</span> <span class="n">listsToJoin</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span> <span class="c1">//</span>
        <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="nl">Objects:</span><span class="o">:</span><span class="n">nonNull</span><span class="o">)</span> <span class="c1">//</span>
        <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">list</span> <span class="o">-&gt;</span> <span class="o">!</span><span class="n">list</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="c1">//</span>
        <span class="o">.</span><span class="na">reduce</span><span class="o">(</span><span class="n">startProduct</span><span class="o">,</span> <span class="nl">CartesianProductUtil:</span><span class="o">:</span><span class="n">joinToCartesianProduct</span><span class="o">,</span> <span class="n">noOp</span><span class="o">)</span> <span class="c1">//</span>
        <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">toList</span><span class="o">());</span>
  <span class="o">}</span>

  <span class="cm">/**
   * @param products [a, b], [x, y]
   * @param toJoin   [1, 2]
   * @return [a, b, 1], [a, b, 2], [x, y, 1], [x, y, 2]
   */</span>
  <span class="kd">private</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;&gt;</span> <span class="nf">joinToCartesianProduct</span><span class="o">(</span><span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;&gt;</span> <span class="n">products</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">toJoin</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">products</span><span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">product</span> <span class="o">-&gt;</span> <span class="n">joinLists</span><span class="o">(</span><span class="n">product</span><span class="o">,</span> <span class="n">toJoin</span><span class="o">));</span>
  <span class="o">}</span>

  <span class="cm">/**
   * @param list   [a, b]
   * @param toJoin [1, 2]
   * @return [a, b, 1], [a, b, 2]
   */</span>
  <span class="kd">private</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;&gt;</span> <span class="nf">joinLists</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">toJoin</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">toJoin</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">map</span><span class="o">(</span><span class="n">element</span> <span class="o">-&gt;</span> <span class="n">appendElementToList</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="n">element</span><span class="o">));</span>
  <span class="o">}</span>

  <span class="cm">/**
   * @param list    [a, b]
   * @param element 1
   * @return [a, b, 1]
   */</span>
  <span class="kd">private</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">appendElementToList</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">,</span> <span class="no">T</span> <span class="n">element</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">capacity</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
    <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">newList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">capacity</span><span class="o">);</span>
    <span class="n">newList</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
    <span class="n">newList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">element</span><span class="o">);</span>
    <span class="k">return</span> <span class="nf">unmodifiableList</span><span class="o">(</span><span class="n">newList</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>The code is also available on this <a href="https://gist.github.com/ThomasPr/8e038d5ebca97261940bf1dd13d3417d">GitHub Gist</a>.</p>

<p>Comments are welcome on <a href="https://www.linkedin.com/posts/thomas-preissler_build-a-cartesian-product-with-java-streams-activity-6857658482074669056-FiZH">LinkedIn</a>.</p>]]></content><author><name>Thomas Preißler</name></author><summary type="html"><![CDATA[Building a Cartesian Product or Permutation is challenging. I used Java Streams to implement a readable algorithm.]]></summary></entry><entry><title type="html">Build my Jekyll blog with bare GitHub Actions</title><link href="https://thomas.preissler.me/blog/2020/12/26/build-my-jekyll-blog-with-bare-github-actions" rel="alternate" type="text/html" title="Build my Jekyll blog with bare GitHub Actions" /><published>2020-12-26T09:55:03+00:00</published><updated>2020-12-26T09:55:03+00:00</updated><id>https://thomas.preissler.me/blog/2020/12/26/build-my-jekyll-blog-with-bare-github-actions</id><content type="html" xml:base="https://thomas.preissler.me/blog/2020/12/26/build-my-jekyll-blog-with-bare-github-actions"><![CDATA[<p>I use <a href="https://jekyllrb.com/">Jekyll</a> to create my blog. It allows me to focus on writing the content with markdown and afterwards to generate a static HTML page that can be published easily.</p>

<p>Next to Jekyll there are three additional components, all provided by GitHub:</p>

<ul>
  <li>source control for the raw blog content</li>
  <li>generating the static page with GitHub Actions</li>
  <li>hosting the generated static page with GitHub Pages</li>
</ul>

<p>Of course, there are many other options if you don’t prefer GitHub. You could also distribute these components to different providers. However, I like the simplicity and completness of GitHub. Additionally, GitHub is free of charge for my purposes.</p>

<p>You can check out the final results in <a href="https://github.com/ThomasPr/ThomasPr.github.io">my public repository</a>. No worries, we’ll walk through the necessary steps.</p>

<h2 id="1-create-jekyll-page">1. Create Jekyll page</h2>

<p>This is not a blog post about Jekyll, they provide a good documentation. Just have a look at the <a href="https://jekyllrb.com/docs/">Jekyll Quickstart</a> to get started with Jekyll.</p>

<h2 id="2-push-jekyll-page">2. Push Jekyll page</h2>

<p>Push the newly created Jekyll page to the <code class="language-plaintext highlighter-rouge">master</code> branch of a newly created GitHub repository.</p>

<p>In this example we’ll use the <code class="language-plaintext highlighter-rouge">master</code> branch for the raw Jekyll page, it’s the branch where I commit and push all the changes I make. In contrast to that, the <code class="language-plaintext highlighter-rouge">gh-pages</code> branch will contain the automatically generated static HTML page where only the GitHub Action will push into.</p>

<h2 id="3-add-the-github-action">3. Add the GitHub Action</h2>

<p>A GitHub Action is a list of commands that will be executed after an event occurs, such as a new commit. It needs to be defined as a yaml file inside the <code class="language-plaintext highlighter-rouge">.github/workflows</code> folder of the repository. In our case, the GitHub Action is the important piece that is responsible for generating the static page out of the Jekyll source.</p>

<p>Additionally, I don’t want to rely on any third-party marketplace Actions. They might be orphaned after some time or contain unwanted side-effects. So, I’ll just use the Actions and commands provided by GitHub itself.</p>

<p>In contrast to automate the workflow by utilizing a GitHub Action, you could manually run <code class="language-plaintext highlighter-rouge">jekyll build</code> on your local machine and upload the <code class="language-plaintext highlighter-rouge">_site</code> directory to a server every time you make changes to your blog. Basically, the GitHub Action will do the same, but it will take the burden for this boring recurring task.</p>

<p>You can see my complete GitHub Action <a href="https://github.com/ThomasPr/ThomasPr.github.io/blob/master/.github/workflows/jekyll.yml">here</a>.</p>

<p>To be clear, the following steps are necessary:</p>

<ol>
  <li>Checkout the <code class="language-plaintext highlighter-rouge">master</code> branch</li>
  <li>Install Ruby and the dependencies from the <code class="language-plaintext highlighter-rouge">Gemfile</code></li>
  <li>Run <code class="language-plaintext highlighter-rouge">jekyll build</code></li>
  <li>Push the generated HTML files to the <code class="language-plaintext highlighter-rouge">gh-pages</code> branch</li>
</ol>

<p>Let me walk you through the important steps:</p>

<h3 id="checkout">Checkout</h3>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">checkout master</span>
  <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v2</span>

<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">checkout gh-pages</span>
  <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v2</span>
  <span class="na">with</span><span class="pi">:</span>
    <span class="na">ref</span><span class="pi">:</span> <span class="s1">'</span><span class="s">gh-pages'</span>
    <span class="na">path</span><span class="pi">:</span> <span class="s1">'</span><span class="s">gh-pages'</span>
</code></pre></div></div>

<p>Both branches, <code class="language-plaintext highlighter-rouge">master</code> and <code class="language-plaintext highlighter-rouge">gh-pages</code>, will be checked out so that the <code class="language-plaintext highlighter-rouge">gh-pages</code> branch resides in the subfolder <code class="language-plaintext highlighter-rouge">gh-pages</code>. Later on, Jekyll will write its output into this <code class="language-plaintext highlighter-rouge">gh-pages</code> folder.</p>

<h3 id="install-ruby-and-dependencies">Install Ruby and dependencies</h3>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">setup ruby</span>
  <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-ruby@v1</span>
  <span class="na">with</span><span class="pi">:</span>
    <span class="na">ruby-version</span><span class="pi">:</span> <span class="m">2.7</span>

<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">cache gems</span>
  <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/cache@v2</span>
  <span class="na">with</span><span class="pi">:</span>
    <span class="na">path</span><span class="pi">:</span> <span class="s">vendor/bundle</span>
    <span class="na">key</span><span class="pi">:</span> <span class="s">${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}</span>
    <span class="na">restore-keys</span><span class="pi">:</span> <span class="s">${{ runner.os }}-gems-</span>

<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">bundle install</span>
  <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
    <span class="s">bundle install --path=vendor/bundle --jobs 4 --retry 3</span>
    <span class="s">bundle clean</span>
</code></pre></div></div>

<p>The three steps should be quite self-explaining. <code class="language-plaintext highlighter-rouge">setup ruby</code> takes care that ruby will be available for future steps and <code class="language-plaintext highlighter-rouge">bundle install</code> will install all gems as defined in the <code class="language-plaintext highlighter-rouge">Gemfile.lock</code>.</p>

<p>The caching might not be obvious: It takes about three minutes to install all dependencies from scratch. But what if we could save this time by re-using the installed gems from a previous run? That’s exaclty what the <code class="language-plaintext highlighter-rouge">cache gems</code> step does. After each run of the GitHub Action it takes the folder <code class="language-plaintext highlighter-rouge">vendor/bundle</code>, puts that into a zip-archive and restores it before the next run. We just need to make sure that <code class="language-plaintext highlighter-rouge">bundle install</code> also uses the folder <code class="language-plaintext highlighter-rouge">vendor/bundle</code> for storing the gems. This will bring the build time down from over three minutes to less than thirty seconds.</p>

<h3 id="build-the-static-page">Build the static page</h3>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">jekyll build</span>
  <span class="na">run</span><span class="pi">:</span> <span class="s">JEKYLL_ENV=production bundle exec jekyll build --destination gh-pages</span>
</code></pre></div></div>

<p>Thats the main step in our GitHub Action, it actually takes Jekyll to generate the static HTML page. Please note that we specify the <code class="language-plaintext highlighter-rouge">gh-pages</code> folder as the destination for the <code class="language-plaintext highlighter-rouge">jekyll build</code> step. Remember, that we checked out the <code class="language-plaintext highlighter-rouge">gh-pages</code> branch from our repository into this <code class="language-plaintext highlighter-rouge">gh-pages</code> folder.</p>

<h3 id="push-the-generated-static-page">Push the generated static page</h3>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">push gh-pages</span>
  <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
    <span class="s">cd gh-pages &amp;&amp; \</span>
    <span class="s">git config user.name "${GITHUB_ACTOR}" &amp;&amp; \</span>
    <span class="s">git config user.email "${GITHUB_ACTOR}@users.noreply.github.com" &amp;&amp; \</span>
    <span class="s">git add . &amp;&amp; \</span>
    <span class="s">git commit -m "jekyll build from Action ${GITHUB_SHA}" &amp;&amp; \</span>
    <span class="s">git push</span>
</code></pre></div></div>

<p>We’re switching into the folder <code class="language-plaintext highlighter-rouge">gh-pages</code> which has been created based on the branch <code class="language-plaintext highlighter-rouge">gh-pages</code> and which contains the latest changes to our static page from the last <code class="language-plaintext highlighter-rouge">jekyll build</code>. This step just commits and pushes any changes in this folder to the <code class="language-plaintext highlighter-rouge">gh-pages</code> branch to get the static page that we can publish on the web. Actually, this step creates the HTML pages shown to a blog visitor.</p>

<h3 id="see-the-github-action-in-action">See the GitHub Action in action</h3>

<p>Once you committed and pushed this workflow-file into the master branch the GitHub Action should be executed. To verify that, click on the Action tab of your Repository and see your newly created Action. The first run can take a couple of minutes.</p>

<p><img src="/assets/images/2020-12-26/github-action.png" alt="GitHub Action" /></p>

<h2 id="4-enable-github-pages">4. Enable GitHub Pages</h2>

<p>The last task is to enable the hosting of the generated static page content. Just make sure that the GitHub Action has been completed successfully before you continue.</p>

<p>To enable GitHub Pages for your repository open the Settings tab and scroll down a little bit. You should see a section named “GitHub Pages”.</p>

<p><img src="/assets/images/2020-12-26/github-pages.png" alt="GitHub Pages" /></p>

<p>The only required setting is to change the Source to the <code class="language-plaintext highlighter-rouge">gh-pages</code> branch. But I strongly recommend to also enable the “Enforce HTTPS” setting.</p>

<p>Thats it. The blog is up and running. Every time I push a change to my blog, the GitHub Action is triggered and the updated static HTML page is published.</p>

<p>Comments are welcome on <a href="https://twitter.com/TheThomasPr/status/1343104333295058944">Twitter</a> or <a href="https://www.linkedin.com/posts/thomas-preissler_build-my-jekyll-blog-with-bare-github-actions-activity-6857657838328696832-A5b7">LinkedIn</a>.</p>]]></content><author><name>Thomas Preißler</name></author><summary type="html"><![CDATA[Use GitHub Actions without third-party marketplace Actions to build my Jekyll blog. Publish the generated content on GitHub Pages.]]></summary></entry><entry><title type="html">Make decisions about a blogging system</title><link href="https://thomas.preissler.me/blog/2020/12/20/make-decisions-about-a-blogging-system" rel="alternate" type="text/html" title="Make decisions about a blogging system" /><published>2020-12-20T21:43:50+00:00</published><updated>2020-12-20T21:43:50+00:00</updated><id>https://thomas.preissler.me/blog/2020/12/20/make-decisions-about-a-blogging-system</id><content type="html" xml:base="https://thomas.preissler.me/blog/2020/12/20/make-decisions-about-a-blogging-system"><![CDATA[<p>I’m a person who really thinks twice about the future development of his decisions, especially when it comes to a system that I probably use for years. It took me ages to set up a blog like this, but in the end it was just a matter of minutes. In this very first blog post I want to walk through the rationale that led me to the current setup.</p>

<h2 id="my-requirements">My Requirements</h2>

<ul>
  <li>Having the content under version control (git)</li>
  <li>No vendor lock-in</li>
  <li>No burden for recurring maintence like security updates</li>
  <li>Use my own domain</li>
  <li>Fully customizable layout and content to fit my needs</li>
  <li>No WYSIWYG-editor, the HTML code looks always a bit creepy</li>
</ul>

<h2 id="the-alternatives">The Alternatives</h2>

<p>There are many services and software out there to get almost the same result. Basically they can be grouped into four categories:</p>

<h3 id="software-as-a-service">Software as a Service</h3>

<p>Providers who offer a fully-featured system hosted and managed by them. You only need to sign up for their service and can start writing your first post.</p>

<p>The most popular blogging provider is workpress.com who provides a hosting instance of WordPress. Please be aware about the difference of the provider WordPress.com and the software WordPress. Other well-known providers are wix.com or jimdo.com, but there are many more out there.</p>

<h3 id="software-installed-on-your-own-server">Software installed on your own server</h3>

<p>Software to be installed and managed by your own on your own server. Mostly, you need a php-powered webspace with a database and upload the software to this webspace. After entering some configuration options you can start blogging. The setup is quite easy and many webspace providers offer a one-click installation where they automated the hassle of installing and configuring the software. However, it’s very uncommon to install software updates and offer migrations in a one-click fashion. WordPress is the the most popular software, but only one out of a huge list.</p>

<h3 id="static-site-generators">Static site generators</h3>

<p>Since I do not plan to offer any dynamic content like comments, contact forms or user login, the blog itself can be run by static pages only. A static site generator where I create the content locally, generate the web page and upload that to web server is a valid option for my requirements. The generated pages can be uploaded to AWS S3 or even simpler just to GitHub Pages. Static site generators are not that common, but some of the known ones are Jekyll, Hugo or Middleman.</p>

<h3 id="develop-the-software-by-my-own">Develop the software by my own</h3>

<p>This feels like re-inventing the wheel once again, but this will be the most flexible and most customizable solution. Since I’m a professional software developer, I have quite some experience to develop my own software.</p>

<h2 id="my-decision">My Decision</h2>

<p>It took ages from the idea to blog by myself until I finally was able to write this blog post you’re reading right now. Let me show you my opinion about the options:</p>

<ul>
  <li>Software as a Service: This seems to be the worst option, I’m hardly able to move my content, have to use a WYSIWYG editor and be unable to fully customize my blog. Therefore, I won’t go for that.</li>
  <li>Software installed on my own server: Thats a much better option, at least I’m able to access the content in the database. But even if I can modify the software and therefore my blog therotically, I don’t have much experience with PHP which is used by many blog engines such as WordPress.</li>
  <li>Static site generators: Seems to be a good option, I don’t have to deal with security updates, they’re usually simple enough for easy layout changes and depending on the hosting I’m able to use my own domain.</li>
  <li>Developing my own software: A very flexible but very time-consuming option. Since I don’t want to focus on blogging itself, not on the blogging software, this option is not my preference. Additionally, I still have to deal with security updates, even worse I have to find and fix them by my own.</li>
</ul>

<p>In the end, I just decided to go for a static site generator: I really like the simplicity and the broad hosting options. Since I already spend so many time to for that decision, I just took the one that I alredy knew from the past: <strong>Jekyll</strong>. For the hosting part I’ll go for GitHub Pages who offers an incredible easy way to host static pages and even more actually generate the static pages based of the Jekyll content.</p>

<p>Check out my public repository on GitHub to see final result:</p>
<ul>
  <li>The <a href="https://github.com/ThomasPr/ThomasPr.github.io/tree/master">master</a> branch contains the Jekyll content</li>
  <li>The <a href="https://github.com/ThomasPr/ThomasPr.github.io/tree/gh-pages">gh-pages</a> branch contains the generated static pages which are visible in the blog</li>
</ul>

<p>Comments are welcome on <a href="https://twitter.com/TheThomasPr/status/1340778103929524234">Twitter</a> or <a href="https://www.linkedin.com/posts/thomas-preissler_make-decisions-about-a-blogging-system-activity-6857657519179931648-4RHN">LinkedIn</a>.</p>]]></content><author><name>Thomas Preißler</name></author><summary type="html"><![CDATA[It was a challenging task to decide which software I want to use for this blog.]]></summary></entry></feed>